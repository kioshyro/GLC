/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gramatica;

import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author Fabricio
 */
public class Tela_GLC extends javax.swing.JFrame {

    private ArrayList ladoEsquerdoProducao = new ArrayList<>();
    private ArrayList ladoDireitoProducao = new ArrayList<>();    
    private ArrayList<Produtor> listaProdutores = new ArrayList<>();    
    
    /**
     * Creates new form Tela_GLC
     */
    public Tela_GLC() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaGramatica = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        btnExecutar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        textAreaResultado = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        rbELivre = new javax.swing.JRadioButton();
        rbSimboloInutil = new javax.swing.JRadioButton();
        rbProducaoUnitaria = new javax.swing.JRadioButton();
        rbFatoracao = new javax.swing.JRadioButton();
        rbRecursaoEsquerda = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel5.setText("Gramática:");

        textAreaGramatica.setColumns(20);
        textAreaGramatica.setRows(5);
        textAreaGramatica.setText("A->Aa|B\nB->bB|b|C\nC->cC\nD->d|D");
        jScrollPane1.setViewportView(textAreaGramatica);

        jLabel6.setText("OBS: Sentença Vazia = *");

        btnExecutar.setText("Executar");
        btnExecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExecutarActionPerformed(evt);
            }
        });

        textAreaResultado.setColumns(20);
        textAreaResultado.setRows(5);
        jScrollPane2.setViewportView(textAreaResultado);

        jLabel7.setText("Resultado:");

        jLabel8.setText("Opções:");

        buttonGroup1.add(rbELivre);
        rbELivre.setSelected(true);
        rbELivre.setText("&-Livre");
        rbELivre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbELivreActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbSimboloInutil);
        rbSimboloInutil.setText("Simbolo inútil");

        buttonGroup1.add(rbProducaoUnitaria);
        rbProducaoUnitaria.setText("Produção unitária");

        buttonGroup1.add(rbFatoracao);
        rbFatoracao.setText("Fatoração");

        buttonGroup1.add(rbRecursaoEsquerda);
        rbRecursaoEsquerda.setText("Recursão à esquerda");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnExecutar))
                    .addComponent(rbELivre)
                    .addComponent(rbSimboloInutil)
                    .addComponent(rbProducaoUnitaria)
                    .addComponent(rbFatoracao)
                    .addComponent(rbRecursaoEsquerda)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(btnExecutar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbELivre)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbSimboloInutil, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbProducaoUnitaria, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbFatoracao, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbRecursaoEsquerda, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnExecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExecutarActionPerformed
        
        separaLadoEsquerdo_LadoDireito();
        populaListaDeProdutores();       
        
        if (rbELivre.isSelected()){
            verifica_ELivre();
        }

        if (rbSimboloInutil.isSelected()){
            verifica_SimboloInutil();
        }

        if (rbProducaoUnitaria.isSelected()){
            verifica_ProducaoUnitaria();
        }

        if (rbFatoracao.isSelected()){
            verifica_Fatoracao();
        }

        if (rbRecursaoEsquerda.isSelected()){
            verifica_RecursaoEsquerda();
        }        
    }//GEN-LAST:event_btnExecutarActionPerformed

    private void rbELivreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbELivreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbELivreActionPerformed

    //--------------------------MÉTODOS PRINCIPAIS-------------------------------------------------------------------        
    public void verifica_ELivre(){
        boolean bTemELivre = false;
        for (int i = 0; i < ladoDireitoProducao.size(); i++) {
            if (ladoDireitoProducao.get(i).toString().equals("*")){
                bTemELivre = true;
                break;
            }
        }
        
        if (bTemELivre==false){
            JOptionPane.showMessageDialog(null, "A Gramática não possui &-Livre.");
        }
        else{
            //encontrando o produtor que possui o &-Livre
            Produtor produtor = new Produtor(); 
            produtor = retornaProdutorComSentencaVazia();
            
            if (produtor == null){
                //nunca deveria cair aqui, apenas precaução
                JOptionPane.showMessageDialog(null, "Não foi possível encontrar o produtor que possui a sentença vazia!!!.");    
            }else{
                //modifica a gramática e exibe no campo de Resultado    
                produtor = criaNovoProdutor_UsandoLetra(produtor.getLetras());
                
                mostraListaProdutores_Geradores();
                
                //atualizar o gerador que tinha sentença vazia ex:       E->*    tem que ficar E->E'
                
                textAreaResultado.append(textAreaGramatica.getText()); //??? AQUI TEM QUE MUDAR, TEM QUE FAZER UMA FUNÇÃO PRA PEGAR TUDO DA LISTAPRODUTORES, QUE TA ATUALIZADO
                textAreaResultado.append("\n");//para garantir que fique em uma linha nova
                
                String novaLinha = produtor.getLetras()+"->";
                for (int i = 0; i < produtor.getGeradores().size(); i++) {
                    novaLinha = novaLinha + produtor.getGeradores().get(i).toString()+"|";
                }
                novaLinha = novaLinha.substring(0, novaLinha.length()-1); //removendo o ultimo "|"
                textAreaResultado.append(novaLinha);
            }
            
        }
    }
    
    public void verifica_SimboloInutil(){
        boolean semAlcance = true;
        boolean infertil = false;
        String aux = "";
        String aux_2 = "";
        String aux_3 = "";
        /*
        int [][]map = new int[listaProdutores.size()][2];
        
        for(int t = 0; t < listaProdutores.size(); t++){
            for(int y = 0; y < 2; y++){
                map[t][y] = -1;
            }
        }*/
                 
        //inferteis
        
        for(int i = 0; i < listaProdutores.size(); i++){
            aux = listaProdutores.get(i).getLetras().toString();
            System.out.println(aux);
            for(int j = 0; j < listaProdutores.get(i).getGeradores().size(); j++){
                aux_2 = listaProdutores.get(i).getGeradores().get(j).toString();
                System.out.println(aux_2);
                if(aux_2.contains(aux) & listaProdutores.get(i).getGeradores().size() == 1){
                    System.out.println(listaProdutores.get(i).getGeradores().size());
                    for(int g = 0; g < listaProdutores.size(); g++){
                        for(int h = 0; h < listaProdutores.get(g).getGeradores().size(); h++){
                            aux_3 = listaProdutores.get(g).getGeradores().get(h).toString();
                            if(aux_3.contains(aux)){
                                listaProdutores.get(g).getGeradores().remove(h);
                            }
                        }
                    }
                    listaProdutores.remove(i);
                    i--;
                    j = 0;
               }
            }
        }
        
        System.out.println("\n");
        
        //inalcancavel
        for(int i = listaProdutores.size()-1; i > 0; i--){
            aux = listaProdutores.get(i).getLetras().toString();
            System.out.println(aux);
            for(int j = listaProdutores.size()-1; j >= 0; j--){
                System.out.println(j);
                if(i == j){
                    System.out.println("iguais");
                }else{
                    System.out.println("entrou");
                    for(int k = 0; k < listaProdutores.get(j).getGeradores().size(); k++){
                        aux_2 = listaProdutores.get(j).getGeradores().get(k).toString();
                        System.out.println(aux_2);
                        if(aux_2.contains(aux)){
                            System.out.println("contem");
                            semAlcance = false;
                        }
                    }
                }
            }
            if(semAlcance == true){
                System.out.println("excluindo: " + listaProdutores.get(i).getLetras().toString());
                listaProdutores.remove(i);
            }
            semAlcance = true;
        }
        
        
        
        String resultado = "";
        for(int i = 0; i < listaProdutores.size(); i++){
            System.out.print(listaProdutores.get(i).getLetras().toString());
            resultado = resultado.concat(listaProdutores.get(i).getLetras().toString() + "->");
            for(int k = 0; k < listaProdutores.get(i).getGeradores().size(); k++){
                System.out.println(listaProdutores.get(i).getGeradores().get(k).toString());
                resultado = resultado.concat(listaProdutores.get(i).getGeradores().get(k).toString() + "|");
            }
            resultado = resultado.concat("\n");
        }
        textAreaResultado.append(resultado);
    }

    public void verifica_ProducaoUnitaria(){
        
    }
        
    public void verifica_Fatoracao(){
        
    }
    
    public void verifica_RecursaoEsquerda(){
        
    }
    //--------------------------FIM MÉTODOS PRINCIPAIS-------------------------------------------------------------------    
    
    
    //--------------------------MÉTODOS AUXILIARES-------------------------------------------------------------------
    public Produtor criaNovoProdutor_UsandoLetra(String letra){
        Produtor produtor = new Produtor();
        
        String letraNova=null;
        boolean auxiliar;
        
        boolean finalizado = false;
        while (finalizado==false){
            //vai tentando achar uma letra nova (testa se ainda não foi usada!!)
            if (letraNova==null){
                letraNova = letra+"'"; //exemplo: E'
            }else{
                letraNova = letraNova+"'"; //exemplo: E''   E'''   E''''
            }
            
            if (existeProdutorComEssaLetra(letraNova)==false){
                finalizado = true;
            }                        
        }
        
        System.out.println("letraNova="+letraNova);
        produtor.setLetras(letraNova);
        ArrayList geradores = new ArrayList<>();
        geradores.add("*");
        geradores.add(letra);
        
        produtor.setGeradores(geradores);
        
        listaProdutores.add(produtor);        
        
        return produtor;
    }
    
    public boolean existeProdutorComEssaLetra(String letra){
        for (Produtor produtor : listaProdutores) {
            if (produtor.getLetras().equals(letra)){
                return true;
            }
        }
        
        return false;
    }
    
    public Produtor retornaProdutorComSentencaVazia(){        
        for (Produtor produtor : listaProdutores) {
            for (int i = 0; i < produtor.getGeradores().size(); i++) {
                if (produtor.getGeradores().get(i).toString().equals("*")){
                    return produtor;
                }
            }            
        }
        
        return null;
    }
    
    public void separaLadoEsquerdo_LadoDireito(){
        String producaoSep[]=textAreaGramatica.getText().split("\n");
        
        int posicaoSeparador=0;
        //para acessar cada uma das linhas da producao: producaoSep[n], sendo n a linha desejada.
        for (String linha:producaoSep){
            System.out.println(linha);
            posicaoSeparador = linha.indexOf("->");
            ladoEsquerdoProducao.add(linha.substring(0, posicaoSeparador).trim());
            ladoDireitoProducao.add(linha.substring(posicaoSeparador+2, linha.length()).trim());
            

        } 
        //System.out.println("ladoEsq="+ladoEsquerdoProducao);
        //System.out.println("ladoDir="+ladoDireitoProducao);                
    }
    
    public void populaListaDeProdutores(){
        for (int i = 0; i < ladoEsquerdoProducao.size(); i++) {
            //cria produtor e coloca as Letras nele (Letras = lado esquerdo)
            Produtor produtor = new Produtor();
            produtor.setLetras(ladoEsquerdoProducao.get(i).toString());
            
            //separa os geradores do lado esquerdo           
            String[] ladoDireitoSeparado = ladoDireitoProducao.get(i).toString().split("\\|");
            
            //insere na lista do produtor
            for (int j = 0; j < ladoDireitoSeparado.length; j++) {
                produtor.getGeradores().add(ladoDireitoSeparado[j]);                
            }
            
            listaProdutores.add(produtor);
        }       

        mostraListaProdutores_Geradores();
    }
    
    public void mostraListaProdutores_Geradores(){
        System.out.println("-----EXIBINDO OS PRODUTORES E SUAS GERAÇÕES-----");
                
        for (Produtor prod : listaProdutores) {
            System.out.println("Letras="+prod.getLetras());
            for (int i = 0; i < prod.getGeradores().size(); i++) {
                System.out.println("    Geradores="+prod.getGeradores().get(i));
            }
        }
        System.out.println("------------------------------------------------");                                
    }
            
    //--------------------------FIM MÉTODOS AUXILIARES-------------------------------------------------------------------    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tela_GLC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tela_GLC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tela_GLC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tela_GLC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tela_GLC().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExecutar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JRadioButton rbELivre;
    private javax.swing.JRadioButton rbFatoracao;
    private javax.swing.JRadioButton rbProducaoUnitaria;
    private javax.swing.JRadioButton rbRecursaoEsquerda;
    private javax.swing.JRadioButton rbSimboloInutil;
    private javax.swing.JTextArea textAreaGramatica;
    private javax.swing.JTextArea textAreaResultado;
    // End of variables declaration//GEN-END:variables
}
